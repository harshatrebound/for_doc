generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  id           String           @id @default(uuid())
  name         String
  fee          Float
  speciality   String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  image        String?
  appointments Appointment[]
  schedules    DoctorSchedule[]
  specialDates SpecialDate[]
}

model DoctorSchedule {
  id           String   @id @default(uuid())
  doctorId     String
  dayOfWeek    Int
  startTime    String
  endTime      String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  breakEnd     String?
  breakStart   String?
  bufferTime   Int      @default(5)
  slotDuration Int      @default(15)
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
}

model Appointment {
  id          String   @id @default(uuid())
  doctorId    String
  patientName String?
  phone       String?
  email       String?
  date        DateTime
  time        String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customerId  String?
  notes       String?
  timeSlot    String?
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
}

model SpecialDate {
  id         String   @id @default(uuid())
  doctorId   String
  date       DateTime
  type       String
  reason     String?
  breakStart String?
  breakEnd   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  doctor     Doctor   @relation(fields: [doctorId], references: [id])

  @@index([doctorId, date])
}

model Settings {
  id        String   @id
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Page {
  id               String         @id @default(uuid())
  slug             String         @unique
  pageType         String
  title            String
  featuredImageUrl String?
  summary          String?
  categoryId       String?
  publishedAt      DateTime?
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  readingTime      String?
  canonicalUrl     String?
  keywords         String?
  metaDescription  String?
  metaTitle        String?
  ogImage          String?
  contentBlocks    ContentBlock[]
  category         Category?      @relation(fields: [categoryId], references: [id])

  @@index([pageType])
  @@index([slug, pageType])
}

model ContentBlock {
  id        String   @id @default(uuid())
  pageId    String
  type      String
  level     Int?
  text      String
  icon      String?
  sortOrder Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pages       Page[]
}

// Model for storing gallery images
model GalleryImage {
  id        String   @id @default(uuid())
  url       String   // URL of the uploaded image (e.g., /uploads/gallery/image.jpg)
  altText   String?  // Optional alt text for accessibility and SEO
  title     String?  // Optional title/caption
  order     Int?     // Optional field for custom sorting
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
