---
description: 
globs: 
alwaysApply: false
---
# HTML to Next.js Static Page Replication Process

## Objective
To accurately replicate content from a provided HTML file into a new, statically generated Next.js page, ensuring consistency with the project's design system, structure, and brand aesthetics.

## Key Reference Files
For design, styling, and structural guidance, refer to:
- Design & Layout Guidelines: `[design_plan.md](mdc:design_plan.md)`
- Homepage (for practical style examples): `[src/app/homepage/page.tsx](mdc:src/app/homepage/page.tsx)`
- Accordion Component (for FAQs): `[src/components/ui/accordion.tsx](mdc:src/components/ui/accordion.tsx)`
- Example Source HTML (typical structure to expect): `[to_replicate/page_2.html](mdc:to_replicate/page_2.html)`
- Example Target Next.js Page (desired output structure): `[src/app/(static)/robotic-knee-replacement-surgeon-in-bangalore/page.tsx](mdc:src/app/(static)/robotic-knee-replacement-surgeon-in-bangalore/page.tsx)`

## Step-by-Step Procedure

**Phase 1: Initialization & Boilerplate Setup**

1.  **Identify Inputs (User Provided):**
    *   Source HTML file (e.g., the user will mention `@page_name.html`).
    *   Target URL slug for the new page (e.g., `/new-page-slug/`).

2.  **Determine File Path:**
    *   The new Next.js page will typically reside at `src/app/(static)/[slug]/page.tsx`. Replace `[slug]` with the provided slug.

3.  **Create New Page File & Add Boilerplate:**
    *   Create the `.tsx` file at the determined path.
    *   **Standard Imports:** Include necessary React and Next.js imports, plus shared layout and UI components:
        ```typescript
        import React from 'react';
        import Image from 'next/image';
        import Link from 'next/link';
        import SiteHeader from '@/components/layout/SiteHeader';
        import SiteFooter from '@/components/layout/SiteFooter';
        import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
        ```
    *   **Metadata:** Define the `metadata` object with `title` and `description` extracted or adapted from the source HTML.
        ```typescript
        export const metadata = {
          title: 'Page Title From Source HTML or User Input',
          description: 'Page description from source HTML or user input.',
        };
        ```
    *   **Brand Colors:** Define or import the `brandColors` object. This can often be copied from an existing page like `[src/app/(static)/robotic-knee-replacement-surgeon-in-bangalore/page.tsx](mdc:src/app/(static)/robotic-knee-replacement-surgeon-in-bangalore/page.tsx)`.
    *   **Basic Page Component Structure:**
        ```typescript
        const NewPageName = () => {
          // brandColors definition
          return (
            <>
              <SiteHeader />
              <main className="container mx-auto px-4 py-8 sm:py-12" style={{ color: brandColors.text, backgroundColor: brandColors.background }}>
                <article className="prose lg:prose-xl max-w-none">
                  {/* Content will be added here */}
                </article>
              </main>
              <SiteFooter />
            </>
          );
        };
        export default NewPageName;
        ```

**Phase 2: Content Transfer and Transformation**

This is an iterative process. Go through the source HTML (`@page_name.html`) section by section.

4.  **Main Title (`<h1>`):**
    *   Replicate the main page title from the source HTML as an `<h1>` element within the `<article>`.
    *   Apply responsive Tailwind CSS classes for styling (e.g., `text-3xl sm:text-4xl md:text-5xl font-bold mb-6 sm:mb-8 text-center`) and `brandColors.primary`.

5.  **Content Sections (`<section>`, `<h2>`, etc.):**
    *   For each distinct section in the source HTML:
        *   Create a corresponding `<section className="mb-10 sm:mb-12">` in JSX.
        *   Replicate headings (`<h2>`, `<h3>`, etc.) using appropriate Tailwind classes for font size, weight, margins, and bottom borders (e.g., `text-2xl sm:text-3xl font-semibold mt-8 mb-4 sm:mt-10 sm:mb-6 pb-2 sm:pb-3 border-b`). Apply `brandColors.primary` to headings and `brandColors.accent + '40'` to borders.

6.  **Text Content (Paragraphs, Lists, Emphasis):**
    *   **Paragraphs (`<p>`):** Transfer `<p>` tag content directly. Tailwind `prose` classes will handle base styling. Add utility classes like `leading-relaxed`, `mb-4 sm:mb-6`, and `style={{ color: brandColors.lightText }}` as needed for spacing and color.
    *   **Lists (`<ul>`, `<ol>`):** Transfer list structures directly. `prose` handles base styling. Apply `list-disc` or `list-decimal`, `pl-6`, `mb-6 sm:mb-8`, `space-y-2 sm:space-y-3`, and `style={{ color: brandColors.lightText }}` as needed.
    *   **Emphasis (`<strong>`, `<em>`):** Convert to `<strong>` and `<em>` in JSX or use Tailwind's `font-bold` / `italic` classes.
    *   **Links (`<a>`):**
        *   Convert to Next.js `<Link href="...">` component for internal links.
        *   For external links, use `<Link href="..." target="_blank" rel="nofollow noopener noreferrer">`.
        *   Style links using classes like `font-medium hover:underline` and `style={{ color: brandColors.accent }}`.

7.  **Images (`<img>`):**
    *   Identify image URLs in the source HTML.
    *   Confirm if images should be hosted locally (e.g., in `/public/images/`) or if external URLs are acceptable.
    *   Use the Next.js `<Image src="..." alt="Descriptive alt text" width={...} height={...} />` component. Provide `width` and `height` for proper layout.
    *   If an image is not immediately available but planned, use a placeholder div with appropriate styling and a comment indicating the image URL.

8.  **FAQ Section (if present):**
    *   Use the `Accordion` components (`Accordion`, `AccordionItem`, `AccordionTrigger`, `AccordionContent`) from `[src/components/ui/accordion.tsx](mdc:src/components/ui/accordion.tsx)`.
    *   Structure the questions and answers from the source HTML into an array of objects and map over them to generate the accordion items. Apply `brandColors` for styling consistency.

9.  **Call to Action (CTA) (if present):**
    *   Replicate any CTA sections, typically a `<section>` with centered text, a heading, a descriptive paragraph, and a prominent button.
    *   Style the button using Tailwind classes and `brandColors.accent` for the background. Ensure the link points to the correct destination (e.g., `/book-appointment`).

**Phase 3: Styling, Review & Finalization**

10. **Apply Brand Colors and Styling Consistently:**
    *   Throughout the content transformation, apply `brandColors` to text, backgrounds, borders, etc., as seen in the `[src/app/(static)/robotic-knee-replacement-surgeon-in-bangalore/page.tsx](mdc:src/app/(static)/robotic-knee-replacement-surgeon-in-bangalore/page.tsx)` and guided by `[design_plan.md](mdc:design_plan.md)`.
    *   Use Tailwind's responsive prefixes (sm:, md:, lg:) to ensure proper display on all screen sizes.
    *   Rely on `prose` classes for the main article body's typography and spacing.

11. **Code Formatting and Cleanliness:**
    *   Ensure JSX is well-formatted and readable.
    *   Remove any commented-out placeholder text once actual content is in place, unless it's for a pending image.

12. **Thorough Review:**
    *   Compare the newly created Next.js page (visually and content-wise) against the source HTML file provided by the user.
    *   Verify all text content, headings, lists, links (check URLs), and other elements have been accurately transferred and styled.
    *   Check for console errors or warnings in the browser.

By following this process, we can systematically replicate HTML pages into the Next.js project while maintaining design consistency and code quality. Remember to ask for clarification if any part of the source HTML is ambiguous or its mapping to the existing design is unclear.


